# 构建环境 - 只构建，不执行
FROM ubuntu:24.04 AS builder

# 设置环境变量
ENV TZ=Asia/Shanghai
ENV DEBIAN_FRONTEND=noninteractive
ENV CURL_VERSION=8.11.0
ENV CGO_ENABLED=1
ENV GOOS=linux
ENV GOARCH=amd64

# 安装Go和构建依赖
RUN apt-get update && apt-get install -y \
    # Go语言环境
    wget \
    # 构建工具
    build-essential \
    pkg-config \
    # libcurl构建依赖
    libssl-dev \
    zlib1g-dev \
    libnghttp2-dev \
    libpsl-dev \
    libidn2-dev \
    # 其他构建依赖
    ca-certificates \
    git \
    && rm -rf /var/lib/apt/lists/*

# 安装Go 1.25
RUN wget https://go.dev/dl/go1.25.0.linux-amd64.tar.gz \
    && tar -C /usr/local -xzf go1.25.0.linux-amd64.tar.gz \
    && rm go1.25.0.linux-amd64.tar.gz

# 设置Go环境变量
ENV PATH="/usr/local/go/bin:${PATH}"
ENV GOPATH="/go"
ENV GOCACHE="/go/cache"
ENV CGO_ENABLED=1


# 设置工作目录
WORKDIR /workspace

# 复制源代码
COPY . .

# 下载Go依赖
RUN go mod download

# 验证依赖
RUN go mod verify

# # 运行测试
# RUN go test -v ./...

# 构建应用
RUN go build -o main .

# 验证构建结果
RUN ls -la main 

# 设置构建结果输出目录
RUN mkdir -p /output
RUN cp main /output/
RUN cp config.yml /output/ 2>/dev/null || true
RUN cp -r config /output/ 2>/dev/null || true

# 显示构建结果信息
RUN echo "构建完成！" && \
    echo "二进制文件: /output/main" && \
    echo "文件大小: $(du -h /output/main | cut -f1)" && \
    echo "文件类型: $(file /output/main)"

# 设置默认命令为显示构建结果（不执行程序）
CMD ["sh", "-c", "echo '构建完成！二进制文件位于 /output/main' && ls -la /output/"]
